name: First app deploy

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FIRST_APP_PROJECT_ID }}
  VERCEL_DATABASE_URL: ${{ secrets.VERCEL_DATABASE_URL }}
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
  NEON_DATABASE_NAME: ${{ secrets.NEON_DATABASE_NAME }}
  NEON_DATABASE_USERNAME: ${{ secrets.NEON_DATABASE_USERNAME }}
  PREVIEW_DOMAIN:

on:
  pull_request:
  workflow_dispatch:

jobs:
  one:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

  deploy_dev:
    runs-on: ubuntu-latest
    environment:
      name: Vercel
      url: https://${{ env.PREVIEW_DOMAIN }}
    defaults:
      run:
        working-directory: 'web'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ./web/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('web/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Verify node_modules
        run: |
          if [ ! -d "node_modules" ] || [ ! "$(ls -A node_modules)" ]; then
            echo "node_modules is empty or missing, running npm ci"
            npm ci
          fi
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8
      - name: Create Neon Branch
        id: create-branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          # parent: dev # optional (defaults to your primary branch)
          branch_name: preview/pr-${{ github.event.number }}-${{ steps.branch-name.outputs.current_branch }}
          username: ${{ env.NEON_DATABASE_USERNAME }}
          database: ${{ env.NEON_DATABASE_NAME }}
          api_key: ${{ env.NEON_API_KEY }}
      - name: Run migrations
        run: |
          touch .env
          echo DATABASE_URL=${{ steps.create-branch.outputs.db_url_with_pooler }} >> .env
          npx prisma generate
          npx prisma migrate deploy
      - name: Pull Vercel Environment Information
        run: npx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
      - name: Build Project Artifacts
        run: npx vercel build --token=$VERCEL_TOKEN
      - name: Deploy Project Artifacts to Vercel
        run: | # grabbing the preview domain from the vercel deploy command
          echo "PREVIEW_DOMAIN=$(npx vercel deploy --prebuilt --token=$VERCEL_TOKEN)" > $GITHUB_ENV
      - name: 'Update preview domain'
        run:
          | # setting the dev domain to the preview domain for the feature branch
          echo "PREVIEW_DOMAIN=$(echo $PREVIEW_DOMAIN | sed 's~^https://~~')" >> $GITHUB_ENV